{
    "title": "A productive week, BOINC sent us work.",
    "datetime": "18th Jan 2019",
    "content": "We finally managed to talk to the BOINC server such that they give us input files to do some computation.<br /><br />A lot of things were done this week. So I will go step by step and also talk about what we will have to do.<br /><br />Firstly, we implemented the WebRPC. As mentioned previously, the WebRPC allows us to talk to the project's server about account, host, forum and other settings.<br /><br />After that, I wanted to implement the RPC Protocol, but it requires a CORS proxy which allows POST. Since the current proxy that we are using cannot POST, I switched to testing with python requests.<br /><br />After a few hours of trial and error, we finally got the BOINC server to reply with some input files. This is how it should be done:<br /><br />First, create an account with the BOINC project through the WebRPC. After account creation, the server will reply with an authenticator and sometimes an opaque_auth key. The authenticator and the opaque_auth key are just identifiers for the account, sort of like API keys for the account.<br /><br />After that, you will need to send a request to the scheduler server. The url to the scheduler server can be found in the HTML of the project's URl. Where to find this URL is documented here: https://boinc.berkeley.edu/trac/wiki/MasterUrl. POST an XML scheduler request with the following fields: platform_name, core_client_major_version, core_client_minor_version, work_req_seconds, authenticator, host_info. The work_req_seconds tells the BOINC server you are looking for work. The host_info includes more tags as documented <a href='https://boinc.berkeley.edu/wiki/Client_state'>here</a> and tells the BOINC server what kind of computer is running all these tasks. I don't think they care much about the fields in host_info, only the amount of RAM and available disk space.<br /><br />Once you do that, the server will reply with a bunch of links to input files to run the computation. I have not tried them though.<br /><br />In addition to this, I also found out that we need to display some terms and conditions for storing the user's information (probably to comply with GDPR). More info can be found <a href='https://boinc.berkeley.edu/trac/wiki/UserOptInConsent'>here</a>.<br /><br /><br />So, here is what we have to do:<br /><ul><li>Create mock BOINC server which implements our own version of Collatz</li><li>Create functions for RPCProtocol</li><li>Create CORS Proxy</li><li>Create display to ask for user's consent to process their information</li><br /><br />I'm currently working on an <a href='https://expressjs.com/'>Express</a> server for the CORS Proxy, should be up in no time."
}